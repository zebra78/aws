---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a bastion setup'

Resources:
    BastionVpc:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16
            EnableDnsSupport: 'true'
            EnableDnsHostnames: 'true'
            InstanceTenancy: default
            Tags:
            -   Key: Name
                Value: bastion-vpc

    BastionIgw:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
            -   Key: Name
                Value: bastion-igw

    BastionIgwAttachToBastionVpc:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: 
                Ref: BastionVpc
            InternetGatewayId:
                Ref: BastionIgw

    BastionRtIgw:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId:
                Ref: BastionVpc
            Tags:
            - Key: Name
              Value: bastion-rt-igw

    BastionRtIgwAddRoute:
        Type: AWS::EC2::Route
        DependsOn: BastionIgw
        Properties:
            RouteTableId:
                Ref: BastionRtIgw
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId:
                Ref: BastionIgw

    BastionPubSn1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:
                Ref: BastionVpc
            CidrBlock: 10.0.1.0/24
            AvailabilityZone: "us-east-2a"
            Tags:
            - Key: Name
              Value: bastion-pub-sn1

    BastionPubSn2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId:
                Ref: BastionVpc
            CidrBlock: 10.0.2.0/24
            AvailabilityZone: "us-east-2a"
            Tags:
            - Key: Name
              Value: bastion-pub-sn2

    BastionRtIgwAssociateBastionPubSn1:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: BastionPubSn1
            RouteTableId:
                Ref: BastionRtIgw

    BastionRtIgwAssociateBastionPubSn2:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            SubnetId:
                Ref: BastionPubSn2
            RouteTableId:
                Ref: BastionRtIgw

    BastionPubSg1:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: BastionPubSg1
            GroupName: BastionPubSg1
            VpcId:
                Ref: BastionVpc
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
            Tags:
            - Key: Name
              Value: bastion-pub-sg1

    JumpServer:
        Type: AWS::EC2::Instance
        Properties:
            InstanceType: t2.micro
            ImageId: ami-0b500ef59d8335eee
            KeyName: bastion
            NetworkInterfaces: 
            - AssociatePublicIpAddress: "true"
              DeviceIndex: "0"
              GroupSet:
              - Ref:    "BastionPubSg1"
              SubnetId: 
                Ref:    "BastionPubSn1"
            Tags:                
            - Key: Name
              Value: bastion-jumpserver-ec2

Outputs:
    RootVpc:
        Description: Output VpcId
        Value: !Ref BastionVpc
        Export:
            Name: !Sub "${AWS::StackName}-VpcId"
    RootCidr:
        Description: Output Cidr
        Value: !GetAtt BastionVpc.CidrBlock
        Export:
            Name: !Sub "${AWS::StackName}-VpcCidr"            
    RtIgw:
        Description: Output Route Table
        Value: !Ref BastionRtIgw
        Export:
            Name: !Sub "${AWS::StackName}-RtIgw"
    Pip:
        Description: Output JumpEip
        Value: !GetAtt JumpServer.PrivateIp
        Export:
            Name: !Sub "${AWS::StackName}-Pip"
    Eip:
        Description: Output JumpEip
        Value: !GetAtt JumpServer.PublicIp
        Export:
            Name: !Sub "${AWS::StackName}-Eip"


# https://github.com/widdix/learn-cloudformation/blob/master/lab11-output-exports/sample-solution-export.yaml
